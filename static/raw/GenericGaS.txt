	public {FieldJavaType} get{UcFieldName}() {
		return {FieldValueVar};
	}

	public void set{UcFieldName}({FieldJavaType} val) {
		this.{FieldValueVar} = val;
		setIsDirty(true);
	}
	
	public static {ClassName} findOneBy{UcFieldName}(SQLiteOpenHelper dbm, {FieldJavaType} val) {
		Cursor c = dbm.getReadableDatabase().query(TABLE_NAME, ALL_COLUMN_NAMES, {FieldWhereClause}, null, null, null);
		c.moveToFirst();
		if (c.isAfterLast()) {
			c.close();
			return null;
		} 
		{ClassName} obj = new {ClassName}(dbm, c, false);
		c.close();
		return obj;
	}
	
	public static List<{ClassName}> findManyBy{UcFieldName}(SQLiteOpenHelper dbm, {FieldJavaType} val) {
		return findManyBy{UcFieldName}(dbm, val, null);
	}
	
	public static List<{ClassName}> findManyBy{UcFieldName}(SQLiteOpenHelper dbm, {FieldJavaType} val, String orderBy) {
		Cursor c = dbm.getReadableDatabase().query(TABLE_NAME, ALL_COLUMN_NAMES, {FieldWhereClause}, null, null, orderBy);
		c.moveToFirst();
		if (c.isAfterLast()) {
			c.close();
			return null;
		} 
		
		ArrayList<{ClassName}> objList = new ArrayList<{ClassName}>();
		while (!c.isAfterLast()) {
			objList.add(new {ClassName}(dbm, c, false));
			c.moveToNext();
		}
		c.close();
		return objList;
	}
	
	public static int deleteBy{UcFieldName}(SQLiteOpenHelper dbm, {FieldJavaType} val) {
		return dbm.getWritableDatabase().delete(TABLE_NAME, {FieldWhereClause});
	}